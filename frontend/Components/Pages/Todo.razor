@page "/todo"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Grpc.Core
@using Grpc.Net.Client
@using MemeOfTheYear
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage ProtectedLocalStore


<div class="mb-3">
    <InputCheckbox @bind-Value="isAuthenticated" id="inlineCheckbox1" class="form-check-input" disabled/>
    <label class="form-check-label" for="inlineCheckbox1">Is Authenticated</label>
</div>


<div class="input-group mb-3">
    <span class="input-group-text" id="basic-addon3">@questionText:</span>
    <InputText @bind-Value="answer" class="form-control" aria-describedby="basic-addon3"/>
</div>

<div class="mb-3">
    <button @onclick="Answer" class="btn btn-primary" >Submit</button>
</div>

<div>
    <label>
        Answer Correct?
        <InputCheckbox @bind-Value="correct" />
    </label>
</div>


@code {
    private bool isAuthenticated = false;
    private bool correct = false;
    private string questionText = "";
    private string answer = "";
    private int questionId = -1;
    private string sessionId = "";

    private GrpcChannel channel;
    private VoteService.VoteServiceClient voteClient;
    private ChallengeService.ChallengeServiceClient challengeClient;

    protected override async Task OnInitializedAsync()
    {
        channel = GrpcChannel.ForAddress("http://localhost:5000");
        voteClient = new VoteService.VoteServiceClient(channel);
        challengeClient = new ChallengeService.ChallengeServiceClient(channel);

        var result = await ProtectedLocalStore.GetAsync<string>("id");
        Console.WriteLine($"{result.Success} => {result.Value}");
        var response = await voteClient.InitAsync(new SessionIdRequest
            {
                MaxLikes = int.MaxValue,
                SessionId = result.Value ?? string.Empty
            });

        Console.WriteLine($"{response.SessionId} => {response.IsAuthenticated}");
        isAuthenticated = response.IsAuthenticated;

        sessionId = response.SessionId;

        if (!result.Success)
        {
            await ProtectedLocalStore.SetAsync("id", response.SessionId);
        }

        if (!response.IsAuthenticated)
        {
            var questionResponse = await challengeClient.GetChallengeAsync(new GetChallengeRequest());
            questionText = questionResponse.QuestionText;
            questionId = questionResponse.QuestionId;
        }
    }

    private async Task Answer()
    {
        var response = await challengeClient.AnswerChallengeAsync(new AnswerChallengeRequest
            {
                QuestionId = questionId,
                Answer = answer,
                SessionId = sessionId
            });

        correct = response.Success;
    }
}